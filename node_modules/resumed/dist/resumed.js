import { readFile as s, writeFile as l } from "node:fs/promises";
import { yellow as r, red as d } from "yoctocolors";
import p from "sade";
import { createRequire as h } from "node:module";
import { promisify as f } from "node:util";
import w from "resume-schema";
const y = "../package.json", c = JSON.parse(
  await s(new URL(y, import.meta.url), "utf-8")
), n = p(c.name).version(c.version);
n.command("render [filename]", "Render resume", {
  alias: "export",
  default: !0
}).option("-o, --output", "Output filename", "resume.html").option("-t, --theme", "Theme to use").action(
  async (e = "resume.json", { output: o, theme: t }) => {
    const i = JSON.parse(await s(e, "utf-8")), a = t ?? i?.meta?.theme;
    if (!a) {
      console.error(
        `No theme to use. Please specify one via the ${r(
          "--theme"
        )} option or the ${r(".meta.theme")} field of your resume.`
      ), process.exitCode = 1;
      return;
    }
    let m;
    try {
      m = await import(a);
    } catch {
      console.error(
        `Could not load theme ${r(a)}. Is it installed?`
      ), process.exitCode = 1;
      return;
    }
    const u = await v(i, m);
    await l(o, u), console.log(
      `You can find your rendered resume at ${r(o)}. Nice work! 🚀`
    );
  }
);
n.command("init [filename]", "Create sample resume", { alias: "create" }).action(async (e = "resume.json") => {
  await $(e), console.log(
    `Done! Start editing ${r(e)} now, and run the ${r(
      "render"
    )} command when you are ready. 👍`
  );
});
n.command("validate [filename]", "Validate resume").action(async (e = "resume.json") => {
  try {
    await j(e), console.log(`Your ${r(e)} looks amazing! ✨`);
  } catch (o) {
    if (!Array.isArray(o))
      throw o;
    console.error(
      `Uh-oh! The following errors were found in ${r(e)}:
`
    ), o.forEach(
      (t) => console.error(` ${d(`❌ ${t.message}`)} at ${r(t.path)}.`)
    ), process.exitCode = 1;
  }
});
const g = h(import.meta.url), $ = (e) => {
  const o = g("resume-schema/sample.resume.json");
  return l(e, JSON.stringify(o, void 0, 2));
}, v = (e, o) => o.render(e), N = f(w.validate), j = async (e) => {
  const o = await s(e, "utf-8");
  return N(JSON.parse(o));
};
export {
  n as cli,
  $ as init,
  v as render,
  j as validate
};
